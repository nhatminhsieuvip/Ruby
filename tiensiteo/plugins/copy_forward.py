import logging
from logging import getLogger

from pyrogram import enums, filters
from pyrogram.errors import UserIsBlocked, UserNotParticipant
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from tiensiteo import BOT_USERNAME, app
from tiensiteo.core.decorator.errors import capture_err
from tiensiteo.vars import COMMAND_HANDLER

LOGGER = getLogger("TienSiTeo")

@app.on_message(filters.command(["saochep"], COMMAND_HANDLER))
async def copymsg(_, message):
    if len(message.command) == 1:
        if not message.reply_to_message:
            return await message.reply("Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn b·∫°n mu·ªën sao ch√©p.")
        try:
            await message.reply_to_message.copy(
                message.from_user.id,
                caption_entities=message.reply_to_message.entities,
                reply_markup=message.reply_to_message.reply_markup,
            )
            return await message.reply_text("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng..")
        except UserIsBlocked:
            return await message.reply(
                "Vui l√≤ng cho ch·ªß nh√¢n c·ªßa t√¥i sao ch√©p tin nh·∫Øn v√†o m·ªôt cu·ªôc tr√≤ chuy·ªán ri√™ng t∆∞.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="üí¨ Tr√≤ chuy·ªán v·ªõi t√¥i",
                                url=f"https://t.me/{BOT_USERNAME}",
                            )
                        ]
                    ]
                ),
            )
        except Exception as e:
            return await message.reply(f"ERROR: {str(e)}")

@app.on_message(filters.command(["chuyentiep"], COMMAND_HANDLER))
@capture_err
async def forwardmsg(_, message):
    if len(message.command) == 1:
        if not message.reply_to_message:
            return await message.reply("Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn b·∫°n mu·ªën chuy·ªÉn ti·∫øp.")
        try:
            await message.reply_to_message.forward(message.from_user.id)
            return await message.reply_text("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng..")
        except UserIsBlocked:
            return await message.reply(
                "Vui l√≤ng chuy·ªÉn ti·∫øp tin nh·∫Øn ƒë·∫øn cu·ªôc tr√≤ chuy·ªán ri√™ng t∆∞ c·ªßa t√¥i..",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="üí¨ Tr√≤ chuy·ªán v·ªõi t√¥i",
                                url=f"https://t.me/{BOT_USERNAME}",
                            )
                        ]
                    ]
                ),
            )
        except Exception as e:
            return await message.reply(f"ERROR: {str(e)}")
