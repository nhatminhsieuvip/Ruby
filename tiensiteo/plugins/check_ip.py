import requests
import dns.resolver
import asyncio
import logging
from logging import getLogger

from pyrogram import filters, Client
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from tiensiteo import app
from tiensiteo.core.decorator.errors import capture_err
from tiensiteo.vars import COMMAND_HANDLER
from urllib.parse import urlparse

LOGGER = getLogger("TienSiTeo")

IPINFO_TOKEN = ''
IPQUALITYSCORE_API_KEY = ''

__MODULE__ = "Ki·ªÉmTraIP"
__HELP__ = "<blockquote>/checkip [ƒë·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn] - Ki·ªÉm tra th√¥ng tin v√† ƒëi·ªÉm ch·∫•t l∆∞·ª£ng c·ªßa ƒë·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn. V√≠ d·ª•: /checkip 8.8.8.8 ho·∫∑c /checkip google.com</blockquote>"

@app.on_message(filters.command(["checkip"], COMMAND_HANDLER))
@capture_err
async def ip_info_and_score(_, ctx: Message):
    msg = await ctx.reply_msg("ƒêang x·ª≠ l√Ω ki·ªÉm tra, vui l√≤ng ƒë·ª£i...", quote=True)

    try:
        if len(ctx.command) != 2:
            raise Exception("Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn sau l·ªánh. V√≠ d·ª•: /ip 8.8.8.8 ho·∫∑c /ip google.com")

        input_value = ctx.command[1]
        # X·ª≠ l√Ω URL n·∫øu c√≥ http:// ho·∫∑c https://
        if input_value.startswith(("http://", "https://")):
            parsed_url = urlparse(input_value)
            input_value = parsed_url.netloc or parsed_url.path.split("/")[0]

        ip_addresses = get_ip_from_input(input_value)

        if not ip_addresses:
            raise Exception("Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ IP n√†o cho ƒë·∫ßu v√†o cung c·∫•p.")

        if len(ip_addresses) == 1:
            ip_info = get_ip_info(ip_addresses[0])
            ip_score, score_description, emoji = get_ip_score(ip_addresses[0], IPQUALITYSCORE_API_KEY)
            if ip_info and ip_score is not None:
                response_message = (
                    f"{ip_info}\n\n"
                    f"**ƒêi·ªÉm IP**: {ip_score} {emoji} ({score_description})"
                )
                await ctx.reply_text(response_message, reply_to_message_id=ctx.id)
            else:
                raise Exception("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin cho ƒë·ªãa ch·ªâ IP cung c·∫•p.")
        else:
            # Hi·ªÉn th·ªã c√°c n√∫t ch·ªçn IP
            buttons = [
                [InlineKeyboardButton(f"IP: {ip}", callback_data=f"ip_select_{ip}")]
                for ip in ip_addresses
            ]
            await ctx.reply_text(
                "T√™n mi·ªÅn c√≥ nhi·ªÅu ƒë·ªãa ch·ªâ IP. Vui l√≤ng ch·ªçn m·ªôt IP ƒë·ªÉ ki·ªÉm tra:",
                reply_markup=InlineKeyboardMarkup(buttons),
                reply_to_message_id=ctx.id
            )
    except Exception as e:
        error_msg = await ctx.reply_text(f"L·ªói: {str(e)}", reply_to_message_id=ctx.id)
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        await error_msg.delete()  # X√≥a th√¥ng b√°o l·ªói
    finally:
        await msg.delete()

@app.on_callback_query(filters.regex(r"ip_select_(.+)"))
async def ip_select_callback(client: Client, callback_query):
    ip_address = callback_query.data.split("_")[-1]
    await callback_query.message.edit_text("ƒêang ki·ªÉm tra IP ƒë√£ ch·ªçn...")

    ip_info = get_ip_info(ip_address)
    ip_score, score_description, emoji = get_ip_score(ip_address, IPQUALITYSCORE_API_KEY)

    if ip_info and ip_score is not None:
        response_message = (
            f"{ip_info}\n\n"
            f"**ƒêi·ªÉm IP**: {ip_score} {emoji} ({score_description})"
        )
        await callback_query.message.edit_text(response_message)
    else:
        error_msg = await callback_query.message.edit_text("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin cho ƒë·ªãa ch·ªâ IP ƒë√£ ch·ªçn.")
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        await error_msg.delete()  # X√≥a th√¥ng b√°o l·ªói

def get_ip_from_input(input_value):
    """Ki·ªÉm tra n·∫øu ƒë·∫ßu v√†o l√† t√™n mi·ªÅn th√¨ tr·∫£ v·ªÅ danh s√°ch IP, n·∫øu l√† IP th√¨ tr·∫£ v·ªÅ danh s√°ch ch·ª©a IP ƒë√≥."""
    try:
        # Ki·ªÉm tra xem ƒë·∫ßu v√†o c√≥ ph·∫£i l√† ƒë·ªãa ch·ªâ IP h·ª£p l·ªá
        parts = input_value.split(".")
        if len(parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in parts):
            return [input_value]

        # N·∫øu l√† t√™n mi·ªÅn, th·ª±c hi·ªán tra c·ª©u DNS
        answers = dns.resolver.resolve(input_value, "A")
        return [str(answer) for answer in answers]
    except Exception as e:
        print(f"L·ªói khi tra c·ª©u DNS: {e}")
        return []

def get_ip_info(ip_address):
    api_url = f"https://ipinfo.io/{ip_address}?token={IPINFO_TOKEN}"
    try:
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            info = (
                f"üåê **IP**: {data.get('ip', 'N/A')}\n"
                f"üèôÔ∏è **Th√†nh ph·ªë**: {data.get('city', 'N/A')}\n"
                f"üìç **Khu v·ª±c**: {data.get('region', 'N/A')}\n"
                f"üåç **Qu·ªëc gia**: {data.get('country', 'N/A')}\n"
                f"üìå **V·ªã tr√≠**: {data.get('loc', 'N/A')}\n"
                f"üè¢ **T·ªï ch·ª©c**: {data.get('org', 'N/A')}\n"
                f"üìÆ **M√£ b∆∞u ƒëi·ªán**: {data.get('postal', 'N/A')}\n"
                f"‚è∞ **M√∫i gi·ªù**: {data.get('timezone', 'N/A')}"
            )
            return info
        return None
    except Exception as e:
        print(f"L·ªói khi l·∫•y th√¥ng tin IP: {e}")
        return None

def get_ip_score(ip_address, api_key):
    api_url = f"https://ipqualityscore.com/api/json/ip/{api_key}/{ip_address}"
    try:
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            fraud_score = data.get('fraud_score', 'N/A')
            if fraud_score != 'N/A':
                fraud_score = int(fraud_score)
                if fraud_score <= 20:
                    score_description = 'T·ªët'
                    emoji = '‚úÖ'
                elif fraud_score <= 60:
                    score_description = 'Trung b√¨nh'
                    emoji = '‚ö†Ô∏è'
                else:
                    score_description = 'K√©m'
                    emoji = '‚ùå'
                return fraud_score, score_description, emoji
        return None, None, None
    except Exception as e:
        print(f"L·ªói khi l·∫•y ƒëi·ªÉm IP: {e}")
        return None, None, None