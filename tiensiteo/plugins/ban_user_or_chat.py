import logging
from logging import getLogger

from curses.ascii import isblank

from pyrogram import Client, filters
from pyrogram.errors import ChannelPrivate, PeerIdInvalid
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from database.users_chats_db import db
from tiensiteo import app
from tiensiteo.helper.localization import use_chat_lang
from tiensiteo.vars import COMMAND_HANDLER, LOG_CHANNEL, SUDO, SUPPORT_CHAT

LOGGER = getLogger("TienSiTeo")

@app.on_message(filters.incoming & filters.private, group=-5)
async def ban_reply(_, ctx: Message):
    if not ctx.from_user:
        return
    isban, alesan = await db.get_ban_status(ctx.from_user.id)
    if isban:
        await ctx.reply_msg(
            f'T√¥i r·∫•t ti·∫øc, B·∫°n b·ªã c·∫•m s·ª≠ d·ª•ng T√¥i. \nL√Ω do: {alesan["reason"]}'
        )
        await ctx.stop_propagation()


@app.on_message(filters.group & filters.incoming, group=-2)
@use_chat_lang()
async def grp_bd(self: Client, ctx: Message, strings):
    if not ctx.from_user:
        return
    if not await db.is_chat_exist(ctx.chat.id):
        try:
            total = await self.get_chat_members_count(ctx.chat.id)
        except ChannelPrivate:
            await ctx.stop_propagation()
        r_j = ctx.from_user.mention if ctx.from_user else "Anonymous"
        await self.send_message(
            LOG_CHANNEL,
            strings("log_bot_added", context="grup_tools").format(
                ttl=ctx.chat.title, cid=ctx.chat.id, tot=total, r_j=r_j
            ),
        )
        await db.add_chat(ctx.chat.id, ctx.chat.title)
    chck = await db.get_chat(ctx.chat.id)
    if chck["is_disabled"]:
        buttons = [
            [InlineKeyboardButton("Li√™n h·ªá h·ªó tr·ª£", url=f"https://t.me/{SUPPORT_CHAT}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        vazha = await db.get_chat(ctx.chat.id)
        try:
            k = await ctx.reply_msg(
                f"KH√îNG ƒê∆Ø·ª¢C PH√âP TR√í CHUY·ªÜN üêû\n\nCh·ªß s·ªü h·ªØu c·ªßa t√¥i ƒë√£ h·∫°n ch·∫ø t√¥i l√†m vi·ªác ·ªü ƒë√¢y!\nL√Ω do : <code>{vazha['reason']}</code>.",
                reply_markup=reply_markup,
            )
            await k.pin()
        except:
            pass
        try:
            await self.leave_chat(ctx.chat.id)
        except:
            pass
        await ctx.stop_propagation()


@app.on_message(filters.command("banuser", COMMAND_HANDLER) & filters.user(SUDO))
async def ban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply("ƒê∆∞a cho t√¥i user id / username")
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "Kh√¥ng c√≥ l√Ω do n√†o ƒë∆∞·ª£c cung c·∫•p"
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply(
            "ƒê√¢y l√† ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá, h√£y ƒë·∫£m b·∫£o r·∫±ng t√¥i ƒë√£ g·∫∑p h·ªç tr∆∞·ªõc ƒë√¢y."
        )
    except IndexError:
        return await message.reply("ƒê√¢y c√≥ th·ªÉ l√† m·ªôt k√™nh, h√£y ƒë·∫£m b·∫£o ƒë√≥ l√† m·ªôt ng∆∞·ªùi d√πng.")
    except Exception as e:
        return await message.reply(f"Error - {e}")
    else:
        isban, alesan = await db.get_ban_status(k.id)
        if isban:
            return await message.reply(
                f"{k.mention} ƒë√£ b·ªã c·∫•m r·ªìi \n<b>L√Ω do:</b> {alesan['reason']}"
            )
        await db.ban_user(k.id, reason)
        await message.reply(
            f"ƒê√£ c·∫•m ng∆∞·ªùi d√πng th√†nh c√¥ng {k.mention}!!\n<b>L√Ω do:</b> {reason}"
        )


@app.on_message(filters.command("unbanuser", COMMAND_HANDLER) & filters.user(SUDO))
async def unban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply("ƒê∆∞a cho t√¥i user id / username")
    r = message.text.split(None)
    chat = message.text.split(None, 2)[1] if len(r) > 2 else message.command[1]
    try:
        chat = int(chat)
    except ValueError:
        pass

    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply(
            "ƒê√¢y l√† m·ªôt ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá, h√£y ch·∫Øc ch·∫Øn r·∫±ng t√¥i ƒë√£ g·∫∑p anh ·∫•y tr∆∞·ªõc ƒë√¢y."
        )
    except IndexError:
        return await message.reply("ƒê√¢y c√≥ th·ªÉ l√† m·ªôt k√™nh, h√£y ch·∫Øc ch·∫Øn r·∫±ng ƒë√≥ l√† m·ªôt ng∆∞·ªùi d√πng.")
    except Exception as e:
        return await message.reply(f"L·ªói - {e}")
    
    is_banned, user_data = await db.get_ban_status(k.id)
    if not is_banned:
        return await message.reply(f"{k.mention} ch∆∞a b·ªã c·∫•m.")
    
    await db.remove_ban(user_data["_id"])  # Thay k.id b·∫±ng user_data["_id"]
    await message.reply(f"Ng∆∞·ªùi d√πng ƒë√£ b·ªè c·∫•m th√†nh c√¥ng {k.mention}!!!")


@app.on_message(filters.command("disablechat", COMMAND_HANDLER) & filters.user(SUDO))
async def disable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply("Cho t√¥i m·ªôt ID tr√≤ chuy·ªán")
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p"
    try:
        chat_ = int(chat)
    except:
        return await message.reply("Cho T√¥i M·ªôt ID Tr√≤ Chuy·ªán H·ª£p L·ªá")
    cha_t = await db.get_chat(chat_)
    if not cha_t:
        return await message.reply("Kh√¥ng T√¨m Th·∫•y Cu·ªôc Tr√≤ Chuy·ªán Trong DB")
    if cha_t["is_disabled"]:
        return await message.reply(
            f"Cu·ªôc tr√≤ chuy·ªán n√†y ƒë√£ b·ªã v√¥ hi·ªáu h√≥a r·ªìi:\nL√Ω do-<code> {cha_t['reason']} </code>"
        )
    await db.disable_chat(chat_, reason)
    await message.reply("Tr√≤ chuy·ªán b·ªã v√¥ hi·ªáu h√≥a th√†nh c√¥ng")
    try:
        buttons = [
            [InlineKeyboardButton("Support", url=f"https://t.me/{SUPPORT_CHAT}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat_,
            text=f"<b>Xin ch√†o c√°c b·∫°n, \nCh·ªß s·ªü h·ªØu c·ªßa t√¥i ƒë√£ b·∫£o t√¥i r·ªùi kh·ªèi nh√≥m n√™n t√¥i ƒëi! N·∫øu b·∫°n mu·ªën th√™m t√¥i m·ªôt l·∫ßn n·ªØa h√£y li√™n h·ªá v·ªõi Ch·ªß s·ªü h·ªØu c·ªßa t√¥i.</b> \nL√Ω do : <code>{reason}</code>",
            reply_markup=reply_markup,
        )
        await bot.leave_chat(chat_)
    except Exception as e:
        await message.reply(f"L·ªói - {e}")


@app.on_message(filters.command("enablechat", COMMAND_HANDLER) & filters.user(SUDO))
async def re_enable_chat(_, ctx: Message):
    if len(ctx.command) == 1:
        return await ctx.reply("Cho t√¥i m·ªôt ID tr√≤ chuy·ªán")
    chat = ctx.command[1]
    try:
        chat_ = int(chat)
    except:
        return await ctx.reply("Cho T√¥i M·ªôt ID Tr√≤ Chuy·ªán H·ª£p L·ªá")
    sts = await db.get_chat(int(chat))
    if not sts:
        return await ctx.reply("Kh√¥ng T√¨m Th·∫•y Cu·ªôc Tr√≤ Chuy·ªán Trong DB !")
    if not sts.get("is_disabled"):
        return await ctx.reply("Cu·ªôc tr√≤ chuy·ªán n√†y ch∆∞a b·ªã v√¥ hi·ªáu h√≥a.")
    await db.re_enable_chat(chat_)
    await ctx.reply("Tr√≤ chuy·ªán ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i th√†nh c√¥ng")
