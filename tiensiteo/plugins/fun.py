import textwrap
from asyncio import gather
import asyncio
import logging
import os
import random
import uuid
import tempfile
from logging import getLogger
from pyrogram import filters
from pyrogram.errors import MessageIdInvalid, PeerIdInvalid, ReactionInvalid
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from tiensiteo import app, user
from tiensiteo.core.decorator.errors import capture_err
from tiensiteo.helper.localization import use_chat_lang
from tiensiteo.vars import COMMAND_HANDLER, SUDO


        
@app.on_message(filters.command(["tungxx"], COMMAND_HANDLER))
@use_chat_lang()
async def dice(c, m, strings):
    dices = await c.send_dice(m.chat.id, reply_to_message_id=m.id)
    await dices.reply_msg(strings("result").format(number=dices.dice.value), quote=True)


@app.on_message(filters.command(["anony"], COMMAND_HANDLER))
async def beriharapan(c, m):
    reply = m.reply_to_message

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi ho·∫∑c kh√¥ng c√≥ n·ªôi dung sau l·ªánh
    if not reply:
        return await m.reply("H√£y tr·∫£ l·ªùi m·ªôt tin nh·∫Øn ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.")

    if len(m.text.split(maxsplit=1)) < 2:
        return await m.reply("H√£y nh·∫≠p tin nh·∫Øn sau l·ªánh /anony.")

    pesan = m.text.split(maxsplit=1)[1]
    if reply.from_user:
        reply_name = reply.from_user.mention
    elif reply.sender_chat:
        reply_name = reply.sender_chat.title
    else:
        return await m.reply("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n.")

    sender_name = m.from_user.mention if m.from_user else m.sender_chat.title
    await reply.reply(f"{pesan}\n\nƒê∆∞·ª£c ai ƒë√≥ g·ª≠i t·ªõi {reply_name}")


@app.on_message(filters.command("react", COMMAND_HANDLER) & filters.user(SUDO))
@user.on_message(filters.command("react", "."))
async def givereact(c, m):
    if len(m.command) == 1:
        return await m.reply(
            "Vui l√≤ng th√™m ph·∫£n ·ª©ng sau l·ªánh, b·∫°n c≈©ng c√≥ th·ªÉ ƒë∆∞a ra nhi·ªÅu ph·∫£n ·ª©ng."
        )
    if not m.reply_to_message:
        return await m.reply("Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn b·∫°n mu·ªën ph·∫£n h·ªìi.")
    emot = list(regex.findall(r"\p{Emoji}", m.text))
    try:
        await m.reply_to_message.react(emoji=emot)
    except ReactionInvalid:
        await m.reply("H√£y ƒë∆∞a ra ph·∫£n ·ª©ng ch√≠nh x√°c.")
    except MessageIdInvalid:
        await m.reply(
            "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n ·ª©ng v·ªõi c√°c bot kh√°c ho·∫∑c kh√¥ng c√≥ t∆∞ c√°ch qu·∫£n tr·ªã vi√™n."
        )
    except PeerIdInvalid:
        await m.reply("Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi tr√≤ chuy·ªán n·∫øu kh√¥ng tham gia nh√≥m ƒë√≥.")
    except Exception as err:
        await m.reply(str(err))


# @app.on_message_reaction_updated(filters.chat(-1001777794636))
async def reaction_update(self, ctx):
    self.log.info(ctx)

# ƒê∆∞·ªùng d·∫´n t·ªõi file GIF
GIF_PATH = "/www/wwwroot/tiensi-teo-bot/assets/tungxu.gif"

# H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng g√µ l·ªánh /coin
@app.on_message(filters.command("tungxu"))
async def coin_flip_command(client, message):
    user_id = message.from_user.id
    
    # Ki·ªÉm tra n·ªôi dung sau l·ªánh /coin
    try:
        user_input = message.text.split(maxsplit=1)[1].lower()  # L·∫•y ph·∫ßn n·ªôi dung sau /coin
    except IndexError:
        await message.reply("B·∫°n ph·∫£i nh·∫≠p 's·∫•p' ho·∫∑c 'ng·ª≠a' sau l·ªánh /tungxu. V√≠ d·ª•: /tungxu s·∫•p")
        return

    # Ki·ªÉm tra xem c√≥ ch·ª©a "s·∫•p" ho·∫∑c "ng·ª≠a"
    if "s·∫•p" not in user_input and "ng·ª≠a" not in user_input:
        await message.reply("Sai c√∫ ph√°p! B·∫°n ph·∫£i nh·∫≠p 's·∫•p' ho·∫∑c 'ng·ª≠a'. V√≠ d·ª•: /tungxu t√¥i ƒëo√°n s·∫•p")
        return

    # X√°c ƒë·ªãnh d·ª± ƒëo√°n
    guess = "s·∫•p" if "s·∫•p" in user_input else "ng·ª≠a"

    # T·∫°o n√∫t "Tung lu√¥n" v√† ƒë√≠nh k√®m ID ng∆∞·ªùi d√πng
    buttons = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("Tung lu√¥n", callback_data=f"flip:{user_id}")]
        ]
    )
    reply_message = await message.reply(f"üí∞ B·∫°n ƒë√£ ƒëo√°n l√† xu s·∫Ω {guess}. Nh·∫•n n√∫t b√™n ƒë·ªÉ tung ƒë·ªìng xu!", reply_markup=buttons)

# H√†m x·ª≠ l√Ω khi b·∫•m n√∫t "Tung xu"
@app.on_callback_query(filters.regex(r"flip:(\d+)"))
async def coin_flip_callback(client, callback_query: CallbackQuery):
    user_id = int(callback_query.data.split(":")[1])
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi b·∫•m n√∫t l√† ng∆∞·ªùi ra l·ªánh
    if callback_query.from_user.id != user_id:
        await callback_query.answer("B·∫°n kh√¥ng th·ªÉ tung v√¨ kh√¥ng ph·∫£i ng∆∞·ªùi c∆∞·ª£c!", show_alert=True)
        return

    # C·∫≠p nh·∫≠t tin nh·∫Øn g·ªëc ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i "ƒêang tung xu"
    await callback_query.edit_message_text("üé≤ ƒêang tung ƒë·ªìng xu cho b·∫°n...", reply_markup=None)

    # G·ª≠i GIF "tung xu" v√† reply v√†o tin nh·∫Øn g·ªëc (tin nh·∫Øn c√≥ n√∫t b·∫•m)
    gif_message = await callback_query.message.reply_animation(
        animation=GIF_PATH
    )
    
    # Hi·ªáu ·ª©ng ch·ªù trong 3 gi√¢y
    await asyncio.sleep(3)

    # Tung ƒë·ªìng xu (s·∫•p ho·∫∑c ng·ª≠a)
    result = random.choice(["ü™ô S·∫•p", "ü™ô Ng·ª≠a"])

    # X√≥a GIF sau khi ƒë√£ ch·ªù xong
    await gif_message.delete()

    # Ch·ªânh s·ª≠a tin nh·∫Øn g·ªëc (tin nh·∫Øn ch·ª©a n√∫t b·∫•m) ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
    await callback_query.edit_message_text(f"üí• K·∫øt qu·∫£ sau khi tung ƒë·ªìng xu: {result}", reply_markup=None)

    
# Danh s√°ch c√°c c√¢u tr·∫£ l·ªùi ng·∫´u nhi√™n
responses = [
    "Ai g·ªçi Ruby Chan ƒë·∫•y? üßê",
    "Nh·∫Øc ƒë·∫øn Ruby Chan l√†m g√¨ th·∫ø? üòé",
    "Ruby Chan ·ªü ƒë√¢y, ai c·∫ßn g√¨ n√†o? üôå",
    "Ruby Chan kh√¥ng mu·ªën xu·∫•t hi·ªán ƒë√¢u nh√©! üòÖ",
    "B·∫°n v·ª´a g·ªçi Ruby Chan, ƒë·ª´ng n√≥i l√† kh√¥ng! ü§î",
    "H√¨nh nh∆∞ c√≥ ai ƒë√≥ nh·∫Øc ƒë·∫øn Ruby Chan? üëÄ",
    "G·ªçi Ruby Chan c√≥ vi·ªác g√¨ kh√¥ng, hay ch·ªâ mu·ªën vui ch∆°i? üòÑ",
    "Ruby Chan ƒë√£ nghe th·∫•y ti·∫øng g·ªçi t·ª´ xa! üìû",
    "·ªí, Ruby Chan ƒë∆∞·ª£c g·ªçi l√™n s√¢n kh·∫•u √†? üé§",
    "Ruby Chan ƒëang ng·ªß, ai l·∫°i l√†m phi·ªÅn th·∫ø n√†y! üò¥",
    "Ruby Chan ƒë√¢y! Mu·ªën g√¨ n√†o, b·∫°n ∆°i? üòä",
    "Ruby Chan xu·∫•t hi·ªán trong m·ªôt cu·ªôc g·ªçi b√≠ ·∫©n... üëª",
    "Ruby Chan nghe r√µ, sao c∆°? üéß",
    "L·∫°i l√† Ruby Chan, ch·∫Øc c√≥ chuy·ªán g√¨ h·ªá tr·ªçng! üò≥",
    "B·∫°n v·ª´a nh·∫Øc ƒë·∫øn Ruby Chan h·∫£? C·∫©n th·∫≠n ƒë√≥! ü§®",
    "Ruby Chan s·∫Øp b√πng n·ªï v√¨ b·ªã g·ªçi qu√° nhi·ªÅu r·ªìi! üí•",
    "Ai l·∫°i ƒëang t√¨m Ruby Chan l·ª´ng danh v·∫≠y? üïµÔ∏è",
    "G·ªçi Ruby Chan m·ªôt ph√°t, ch·∫Øc ch·∫Øn c√≥ ƒëi·ªÅu b√≠ ·∫©n! üîç",
    "Nh·∫Øc ƒë·∫øn Ruby Chan l√† ph·∫£i c·∫©n tr·ªçng nh√©! ‚ö†Ô∏è",
    "Ruby Chan c√≥ m·∫∑t, c√≥ ai c·∫ßn ƒë∆∞·ª£c gi√∫p ƒë·ª° kh√¥ng? ü¶∏",
    "B·∫°n v·ª´a kh∆°i m√†o m·ªôt cu·ªôc phi√™u l∆∞u c·ªßa Ruby Chan! üó∫Ô∏è",
    "Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi c·ªßa Ruby Chan! üåç",
    "C√≥ ai ƒëang nh·∫Øc ƒë·∫øn m·ªôt huy·ªÅn tho·∫°i t√™n Ruby Chan kh√¥ng? üåü",
    "G·ªçi Ruby Chan th·∫ø n√†y, ch·∫Øc l·∫°i c√≥ chuy·ªán l·ªõn r·ªìi! üö®",
    "B·∫°n ƒë√£ ƒë√°nh th·ª©c con qu√°i v·∫≠t Ruby Chan! üêâ",
    "Ruby Chan nghe th·∫•y ti·∫øng g·ªçi t·ª´ v≈© tr·ª• xa x√¥i! üåå",
    "ƒê·ª´ng c√≥ m√† ƒë√πa v·ªõi Ruby Chan nh√©! ü§°",
    "Ruby Chan v·ª´a nghe th·∫•y m·ªôt ti·∫øng g·ªçi r·∫•t l·∫°... üëΩ",
    "Ruby Chan ƒë√¢y, ai g·ªçi th·∫ø? ü§ó",
    "G·ªçi Ruby Chan th√¨ ph·∫£i c√≥ l√Ω do ch√≠nh ƒë√°ng nh√©! üìù",
    "M·ªôt l·ªùi nh·∫Øc ƒë·∫øn Ruby Chan c√≥ th·ªÉ l√†m rung chuy·ªÉn th·∫ø gi·ªõi! üå™Ô∏è"
]


# H√†m x·ª≠ l√Ω khi ph√°t hi·ªán t·ª´ 'T√®o' trong tin nh·∫Øn
@app.on_message(filters.text & filters.regex(r".*T√®o.*"))
@use_chat_lang()
async def reply_to_teo(c, m, strings):
    response = random.choice(responses)  # Ch·ªçn c√¢u tr·∫£ l·ªùi ng·∫´u nhi√™n
    await c.send_message(m.chat.id, response, reply_to_message_id=m.id)
