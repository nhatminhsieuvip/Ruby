import aiohttp
import asyncio
import urllib.parse
import logging
from logging import getLogger
from pyrogram import filters
from pyrogram import enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, Message
from tiensiteo import app
from tiensiteo.vars import COMMAND_HANDLER

LOGGER = getLogger("TienSiTeo")

__MODULE__ = "T√¨mPhim"
__HELP__ = """
<blockquote>/xemphim [truy v·∫•n] - T√¨m v√† xem phim qua phimapi
üé¨ ‚ö†Ô∏è L∆∞u √Ω:
üí° TTJB kh√¥ng l∆∞u tr·ªØ phim v√† kh√¥ng khuy·∫øn kh√≠ch xem phim kh√¥ng b·∫£n quy·ªÅn.
‚úÖ N·∫øu c√≥ th·ªÉ, h√£y s·ª≠ d·ª•ng c√°c n·ªÅn t·∫£ng phim b·∫£n quy·ªÅn ƒë·ªÉ ·ªßng h·ªô t√°c gi·∫£! üíñ</blockquote>
"""

PHIM_API_BASE_URL = "https://phimapi.com/v1/api/tim-kiem"
PHIM_DETAIL_URL = "https://phimapi.com/phim"

RESULTS_PER_PAGE = 6
EPISODES_PER_PAGE = 6
DEFAULT_IMAGE_URL = "https://api.dabeecao.org/data/watch-movie.jpg"

### X·ª≠ l√Ω l·ªánh t√¨m ki·∫øm phim
@app.on_message(filters.command("xemphim", COMMAND_HANDLER))
async def movie_search_handler(_, message: Message):
    # Ki·ªÉm tra n·∫øu l·ªánh kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m
    if message.chat.type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_msg(
            "L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.",
            quote=True,
            del_in=5
        )

    if len(message.command) < 2:
        return await message.reply("‚ùå Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm phim.\nV√≠ d·ª•: `/xemphim ng∆∞·ªùi d∆°i`")

    query = " ".join(message.command[1:])

    # M√£ h√≥a URL ƒë·ªÉ ƒë·∫£m b·∫£o t·ª´ kh√≥a kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
    encoded_query = urllib.parse.quote(query)

    reply_msg = await message.reply_photo(
        photo=DEFAULT_IMAGE_URL,
        caption=f"üîç ƒêang t√¨m ki·∫øm phim v·ªõi t·ª´ kh√≥a: `{query}`...",
        quote=True,
    )

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{PHIM_API_BASE_URL}?keyword={encoded_query}&limit=50") as response:
                if response.status != 200:
                    return await reply_msg.edit_caption("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API t√¨m ki·∫øm phim.")
                
                data = await response.json()
                if not data.get("status") == "success" or not data["data"]["items"]:
                    return await reply_msg.edit_caption(f"‚ùå Kh√¥ng t√¨m th·∫•y phim n√†o v·ªõi t·ª´ kh√≥a: `{query}`.")

                results = data["data"]["items"]
                await send_paginated_results(reply_msg, results, page=1, query=query, user_id=message.from_user.id)

    except Exception as e:
        LOGGER.error(f"L·ªói khi t√¨m ki·∫øm phim: {e}")
        await reply_msg.edit_caption("‚ùå ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm phim. Vui l√≤ng th·ª≠ l·∫°i sau.")

### G·ª≠i danh s√°ch k·∫øt qu·∫£ ph√¢n trang
async def send_paginated_results(message, results, page, query, user_id):
    # T√≠nh to√°n s·ªë trang
    if not results:  # Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ k·∫øt qu·∫£
        return await message.edit_media(
            media=InputMediaPhoto(
                media=DEFAULT_IMAGE_URL,
                caption=f"üé¨ Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho: `{query}`."
            ),
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå ƒê√≥ng", callback_data=f"close#{user_id}")]]
            ),
        )
    
    total_pages = max(1, (len(results) + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE)
    page = max(1, min(page, total_pages))  # ƒê·∫£m b·∫£o `page` h·ª£p l·ªá

    # L·∫•y danh s√°ch k·∫øt qu·∫£ cho trang hi·ªán t·∫°i
    start_index = (page - 1) * RESULTS_PER_PAGE
    end_index = min(start_index + RESULTS_PER_PAGE, len(results))
    sliced_results = results[start_index:end_index]

    # T·∫°o n√∫t
    buttons = []
    for item in sliced_results:
        slug = item["slug"][:50]
        callback_data = f"movie_detail#{slug}#{user_id}"  # Th√™m user_id v√†o callback data
        if len(callback_data) > 64:
            callback_data = callback_data[:60] + "..."  # C·∫Øt callback_data n·∫øu c·∫ßn
        buttons.append([InlineKeyboardButton(text=item["name"], callback_data=callback_data)])


    # N√∫t ph√¢n trang
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=f"search_page#{query}#{page-1}#{user_id}"))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è Ti·∫øp", callback_data=f"search_page#{query}#{page+1}#{user_id}"))
    if pagination_buttons:
        buttons.append(pagination_buttons)

    # N√∫t ƒë√≥ng
    buttons.append([InlineKeyboardButton("‚ùå ƒê√≥ng", callback_data=f"close#{user_id}")])

    # G·ª≠i k·∫øt qu·∫£
    await message.edit_media(
        media=InputMediaPhoto(
            media=DEFAULT_IMAGE_URL,
            caption=f"üé¨ K·∫øt qu·∫£ t√¨m ki·∫øm cho: `{query}` (Trang {page}/{total_pages})"
        ),
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    
### Callback x·ª≠ l√Ω ph√¢n trang t√¨m ki·∫øm
@app.on_callback_query(filters.regex(r"^search_page#"))
async def search_pagination_handler(_, callback_query):
    _, query, page, user_id = callback_query.data.split("#")
    page = int(page)

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if str(callback_query.from_user.id) != user_id:
        return await callback_query.answer("‚ö†Ô∏è Truy c·∫≠p b·ªã t·ª´ ch·ªëi", show_alert=True)

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{PHIM_API_BASE_URL}?keyword={query}&limit=50") as response:
            if response.status != 200:
                return await callback_query.message.edit_caption("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API t√¨m ki·∫øm phim.")
            
            data = await response.json()
            results = data["data"]["items"]
            await send_paginated_results(callback_query.message, results, page, query, user_id)

### Callback x·ª≠ l√Ω chi ti·∫øt phim
@app.on_callback_query(filters.regex(r"^movie_detail#"))
async def movie_detail_handler(_, callback_query):
    slug, user_id = callback_query.data.split("#")[1:]

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if str(callback_query.from_user.id) != user_id:
        return await callback_query.answer("‚ö†Ô∏è Truy c·∫≠p b·ªã t·ª´ ch·ªëi", show_alert=True)

    await callback_query.answer("üîç ƒêang t·∫£i chi ti·∫øt phim...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{PHIM_DETAIL_URL}/{slug}") as response:
                if response.status != 200:
                    return await callback_query.message.edit_caption("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API chi ti·∫øt phim.")
                
                data = await response.json()
                if not data.get("status"):
                    return await callback_query.message.edit_caption("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt phim.")
                
                movie = data["movie"]
                episodes = data["episodes"][0]["server_data"]
                await send_paginated_episodes(callback_query.message, movie, episodes, page=1, user_id=callback_query.from_user.id)

    except Exception as e:
        LOGGER.error(f"L·ªói khi t·∫£i chi ti·∫øt phim: {e}")
        await callback_query.message.edit_caption("‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt phim. Vui l√≤ng th·ª≠ l·∫°i sau.")


### Callback x·ª≠ l√Ω ph√¢n trang t·∫≠p phim
@app.on_callback_query(filters.regex(r"^episode_page#"))
async def episode_pagination_handler(_, callback_query):
    try:
        _, slug, page, user_id = callback_query.data.split("#")
        page = int(page)

        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if str(callback_query.from_user.id) != user_id:
            return await callback_query.answer("‚ö†Ô∏è Truy c·∫≠p b·ªã t·ª´ ch·ªëi", show_alert=True)

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{PHIM_DETAIL_URL}/{slug}") as response:
                if response.status != 200:
                    return await callback_query.message.edit_caption("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API chi ti·∫øt phim.")
                
                data = await response.json()
                if not data.get("status"):
                    return await callback_query.message.edit_caption("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt phim.")
                
                movie = data["movie"]
                episodes = data["episodes"][0]["server_data"]

                total_pages = max(1, (len(episodes) + EPISODES_PER_PAGE - 1) // EPISODES_PER_PAGE)
                if page < 1 or page > total_pages:
                    return await callback_query.answer("‚ùå Trang kh√¥ng h·ª£p l·ªá.", show_alert=True)

                await send_paginated_episodes(callback_query.message, movie, episodes, page, user_id)

    except Exception as e:
        LOGGER.error(f"L·ªói khi ph√¢n trang t·∫≠p phim: {e}")
        await callback_query.message.edit_caption("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")

### G·ª≠i danh s√°ch t·∫≠p phim ph√¢n trang
MAX_CONTENT_LENGTH = 250  # Gi·ªõi h·∫°n ƒë·ªô d√†i c·ªßa ph·∫ßn content

# H√†m ƒë·ªÉ c·∫Øt ph·∫ßn content n·∫øu n√≥ qu√° d√†i
def truncate_content(content, max_length=MAX_CONTENT_LENGTH):
    if len(content) > max_length:
        return content[:max_length - 3] + "..."  # C·∫Øt b·ªõt v√† th√™m d·∫•u "..."
    return content

async def send_paginated_episodes(message, movie, episodes, page, user_id):
    # T√≠nh to√°n s·ªë trang
    if not episodes:  # Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ t·∫≠p
        return await message.edit_media(
            media=InputMediaPhoto(
                media=movie["poster_url"],
                caption=f"üé¨ **{movie['name']}**\n\n‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch t·∫≠p phim."
            ),
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå ƒê√≥ng", callback_data=f"close#{user_id}")]]
            ),
        )
    
    total_pages = max(1, (len(episodes) + EPISODES_PER_PAGE - 1) // EPISODES_PER_PAGE)
    page = max(1, min(page, total_pages))  # ƒê·∫£m b·∫£o `page` h·ª£p l·ªá

    # L·∫•y danh s√°ch t·∫≠p phim
    start_index = (page - 1) * EPISODES_PER_PAGE
    end_index = min(start_index + EPISODES_PER_PAGE, len(episodes))
    sliced_episodes = episodes[start_index:end_index]

    # T·∫°o n√∫t: x·∫øp 3 n√∫t 1 h√†ng
    buttons = []
    row = []
    for i, ep in enumerate(sliced_episodes, start=1):
        link_m3u8 = f"https://api.dabeecao.org/player?url={ep['link_m3u8']}"
        row.append(InlineKeyboardButton(text=ep["name"], url=link_m3u8))
        if i % 3 == 0 or i == len(sliced_episodes):  # Khi ƒë·ªß 3 n√∫t ho·∫∑c l√† n√∫t cu·ªëi c√πng
            buttons.append(row)
            row = []

    # N√∫t ph√¢n trang
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=f"episode_page#{movie['slug']}#{page-1}#{user_id}"))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è Ti·∫øp", callback_data=f"episode_page#{movie['slug']}#{page+1}#{user_id}"))
    if pagination_buttons:
        buttons.append(pagination_buttons)

    # N√∫t ƒë√≥ng
    buttons.append([InlineKeyboardButton("‚ùå ƒê√≥ng", callback_data=f"close#{user_id}")])

    # C·∫Øt ph·∫ßn n·ªôi dung movie['content'] n·∫øu qu√° d√†i
    truncated_content = truncate_content(movie['content'])

    # G·ª≠i th√¥ng tin phim v√† danh s√°ch t·∫≠p
    text = (
        f"üé¨ **{movie['name']}**\n"
        f"üìÖ NƒÉm: {movie['year']}\n"
        f"üïí Th·ªùi l∆∞·ª£ng: {movie['time']}\n"
        f"üåç Qu·ªëc gia: {', '.join(c['name'] for c in movie['country'])}\n"
        f"üìÑ N·ªôi dung: {truncated_content}\n\n"
        f"üé¨ **‚ö†Ô∏è L∆∞u √Ω:**\nüí° TTJB kh√¥ng l∆∞u tr·ªØ phim v√† kh√¥ng khuy·∫øn kh√≠ch xem phim kh√¥ng b·∫£n quy·ªÅn.\n‚úÖ N·∫øu c√≥ th·ªÉ, h√£y s·ª≠ d·ª•ng c√°c n·ªÅn t·∫£ng phim b·∫£n quy·ªÅn ƒë·ªÉ ·ªßng h·ªô t√°c gi·∫£! üíñ**\n\n"
        f"**Danh s√°ch t·∫≠p:** Trang {page}/{total_pages}"
    )

    await message.edit_media(
        media=InputMediaPhoto(
            media=movie["poster_url"],
            caption=text,
        ),
        reply_markup=InlineKeyboardMarkup(buttons),
    )


### Callback ƒë√≥ng tin nh·∫Øn
@app.on_callback_query(filters.regex(r"^close#"))
async def close_callback(_, callback_query):
    user_id = callback_query.data.split("#")[1]

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if str(callback_query.from_user.id) != user_id:
        return await callback_query.answer("‚ö†Ô∏è Truy c·∫≠p b·ªã t·ª´ ch·ªëi", show_alert=True)

    await callback_query.message.delete()