import zipfile
import shutil
import tempfile
import asyncio
import math
import os
import re
import time
import aiohttp
import pytz
import subprocess
import random
import string
import logging
from logging import getLogger
from datetime import datetime, timedelta
from urllib.parse import unquote

from bs4 import BeautifulSoup
from cloudscraper import create_scraper
from pyrogram import filters, enums
from pyrogram.file_id import FileId
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.enums import ChatMemberStatus as CMS
from pySmartDL import SmartDL

from tiensiteo import app
from tiensiteo.core.decorator import capture_err, new_task
from tiensiteo.helper.http import fetch
from tiensiteo.helper.pyro_progress import humanbytes, progress_for_pyrogram
from tiensiteo.vars import COMMAND_HANDLER, SUDO

LOGGER = getLogger("TienSiTeo")

__MODULE__ = "T·∫£iV·ªÅ"
__HELP__ = """
<blockquote>/getfiles [url/tr·∫£ l·ªùi t·ªáp]- T·∫£i xu·ªëng t·ªáp t·ª´ URL ho·∫∑c Telegram (Ch·ªâ d√†nh cho ch·ªß bot) 
/getdirect [tr·∫£ l·ªùi t·ªáp] - T·∫£i t·ªáp l√™n tmpfiles ƒë·ªÉ l·∫•y link t·∫£i xu·ªëng (direct link)
/getinstall [tr·∫£ l·ªùi t·ªáp]</blockquote> - T·∫°o link c√†i ipa qua trollstore hay link c√†i OTA tr·ª±c ti·∫øp t·ª´ file tr√™n Telegram
"""
async def auto_delete_message(message, delay=1800):
    await asyncio.sleep(delay)
    await message.delete()

API_UPLOAD_URL = "https://tmpfiles.dabeecao.org/upload"
TIMEOUT_MINUTES = 60  # Th·ªùi gian h·∫øt h·∫°n l√† 60 ph√∫t

@app.on_message(filters.command(["getdirect"], COMMAND_HANDLER))
async def upload(bot, message):
    if message.chat.type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")
    
    if not message.reply_to_message:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin ph∆∞∆°ng ti·ªán.")
    
    media = next(
        (media for media in [
            message.reply_to_message.video,
            message.reply_to_message.document,
            message.reply_to_message.audio,
            message.reply_to_message.photo
        ] if media is not None),
        None
    )
    
    if not media:
        return await message.reply("Lo·∫°i ph∆∞∆°ng ti·ªán kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
    
    m = await message.reply("T·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß c·ªßa t√¥i...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    fileku = await message.reply_to_message.download(
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )
    
    try:
        # T·∫°o ƒë·ªëi t∆∞·ª£ng FormData ƒë·ªÉ g·ª≠i file
        form = aiohttp.FormData()
        form.add_field('file', open(fileku, 'rb'))
        
        await m.edit("ƒêang t·∫£i l√™n tmpfiles, xin ch·ªù..")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(API_UPLOAD_URL, data=form) as response:
                response_json = await response.json()
        
        if 'url' in response_json:
            file_url = response_json['url']
            
            # T√≠nh th·ªùi gian h·∫øt h·∫°n v·ªõi m√∫i gi·ªù Asia/Ho_Chi_Minh (UTC+7)
            tz = pytz.timezone('Asia/Ho_Chi_Minh')
            expiration_time = datetime.now(tz) + timedelta(minutes=TIMEOUT_MINUTES)
            expiration_str = expiration_time.strftime("%H:%M:%S %d/%m/%Y")
            
            output = (
                f'T·ªáp ƒë√£ t·∫£i l√™n tmpfiles. Li√™n k·∫øt c√≥ hi·ªáu l·ª±c trong {TIMEOUT_MINUTES} ph√∫t v√† s·∫Ω h·∫øt h·∫°n v√†o l√∫c {expiration_str}.\n\n'
                f'üì• Link t·∫£i xu·ªëng: <code>{file_url}</code>'
            )
            
            btn = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üîó Chia s·∫ª li√™n k·∫øt", url=f"https://t.me/share/url?url={file_url}"
                        )
                    ]
                ]
            )
            await m.edit(output, reply_markup=btn)
            
        else:
            await m.edit("ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n file.")
        
    except Exception as e:
        await bot.send_message(message.chat.id, text=f"ƒê√£ x·∫£y ra l·ªói!\n\n{e}")
        
    finally:
        # X√≥a t·ªáp ngay sau khi x·ª≠ l√Ω
        if os.path.exists(fileku):
            os.remove(fileku)
            
    # X√≥a tin nh·∫Øn sau 60 ph√∫t
    await auto_delete_message(m, TIMEOUT_MINUTES * 60)  # 60 ph√∫t
    
API_URL = "https://litterbox.catbox.moe/resources/internals/api.php"
UPLOAD_TIME = "1h"
MAX_FILE_SIZE_MB = 1024  # 1GB = 1024MB

ASSETS_DIR = "/www/wwwroot/tiensi-teo-bot/assets"
GETINSTALL_DIR = os.path.join(ASSETS_DIR, "getinstall")
DYLIB_DIR = os.path.join(ASSETS_DIR, "dylib")
SATELLA_PATH = os.path.join(DYLIB_DIR, "SatellaJailed.dylib")
FIX_PATH = os.path.join(DYLIB_DIR, "Fix_Sideload_TTJB.dylib")
FIX1_PATH = os.path.join(DYLIB_DIR, "Fix_Sideload_1_TTJB.dylib")
FIX2_PATH = os.path.join(DYLIB_DIR, "Fix_Sideload_2_TTJB.dylib")
ADBLOCK_PATH = os.path.join(DYLIB_DIR, "Adblock.dylib")
EXTENSIONFIX_PATH = os.path.join(DYLIB_DIR, "ExtensionFix_TTJB.dylib")
P12_PATH = os.path.join(GETINSTALL_DIR, "cer.p12")
MOBILEPROVISION_PATH = os.path.join(GETINSTALL_DIR, "cer.mobileprovision")
ZSIGN_PATH = "/usr/local/bin/zsign"

def generate_random_filename(extension=".ipa"):
    """H√†m t·∫°o t√™n t·ªáp ng·∫´u nhi√™n v·ªõi ph·∫ßn m·ªü r·ªông ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh."""
    random_name = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    return f"{random_name}{extension}"

#@app.on_message(filters.command(["getinstall"], COMMAND_HANDLER))
async def upload(bot, message):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† trong nh√≥m
    if message.chat.type != enums.ChatType.GROUP and message.chat.type != enums.ChatType.SUPERGROUP:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")
    
    if not message.reply_to_message:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin .ipa ho·∫∑c .tipa b·∫±ng l·ªánh")
    
    media = message.reply_to_message.document
    if not media or not media.file_name.endswith(('.ipa', '.tipa')):
        return await message.reply("Ch·ªâ h·ªó tr·ª£ t·ªáp .ipa ho·∫∑c .tipa.")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc t·∫≠p tin
    file_size_mb = media.file_size / (1024 * 1024)  # K√≠ch th∆∞·ªõc t·∫≠p tin t√≠nh b·∫±ng MB
    if file_size_mb > MAX_FILE_SIZE_MB:
        return await message.reply("T·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªâ t·∫£i l√™n c√°c t·∫≠p tin d∆∞·ªõi 1GB.")
    
    m = await message.reply("ƒêang t·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß x·ª≠ l√Ω...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    original_file_path = await message.reply_to_message.download(
        file_name=os.path.join(ASSETS_DIR, generate_random_filename()),
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )

    original_file_name = media.file_name  # L∆∞u l·∫°i t√™n t·ªáp g·ªëc

    # ƒê·ªïi t√™n file th√†nh t√™n ng·∫´u nhi√™n v·ªõi ƒëu√¥i .ipa n·∫øu c·∫ßn
    if original_file_path.endswith('.tipa'):
        new_file_path = original_file_path.replace('.tipa', '.ipa')
        os.rename(original_file_path, new_file_path)
        original_file_path = new_file_path

    # T·∫°o t√™n t·ªáp ƒë·∫ßu ra v·ªõi t√™n ng·∫´u nhi√™n c√≥ h·∫≠u t·ªë "_output.ipa"
    output_file_path = original_file_path.replace(".ipa", "_output.ipa")

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c t·ªáp v√† ƒë∆∞·ªùng d·∫´n
    if not os.path.exists(P12_PATH):
        await m.edit(f"T·ªáp ch·ª©ng ch·ªâ kh√¥ng t·ªìn t·∫°i: {P12_PATH}")
        return
    if not os.path.exists(MOBILEPROVISION_PATH):
        await m.edit(f"T·ªáp mobileprovision kh√¥ng t·ªìn t·∫°i: {MOBILEPROVISION_PATH}")
        return
    if not os.path.exists(original_file_path):
        await m.edit(f"T·ªáp IPA kh√¥ng t·ªìn t·∫°i: {original_file_path}")
        return
    if not os.path.exists(ZSIGN_PATH):
        await m.edit(f"T·ªáp th·ª±c thi zsign kh√¥ng t·ªìn t·∫°i: {ZSIGN_PATH}")
        return

    try:
        # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu k√Ω
        await m.edit("ƒêang ti·∫øn h√†nh k√Ω t·ªáp c·ªßa b·∫°n, xin ch·ªù...")

        # K√Ω file b·∫±ng zsign v√† l∆∞u v√†o ƒë∆∞·ªùng d·∫´n ch·ªâ ƒë·ªãnh
        command = f"{ZSIGN_PATH} -z 6 -k {P12_PATH} -p TTJB -m {MOBILEPROVISION_PATH} -o {output_file_path} {original_file_path}"
        
        # Ch·∫°y l·ªánh zsign b·∫±ng subprocess v√† ghi c·∫£ stdout v√† stderr
        result = subprocess.run(
            ['sh', '-c', command], 
            cwd=GETINSTALL_DIR,  # Ch·∫°y l·ªánh trong th∆∞ m·ª•c getinstall
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            env=os.environ.copy()
        )

        # Ki·ªÉm tra xem c√≥ l·ªói kh√¥ng
        if result.returncode != 0:
            # C√≥ l·ªói x·∫£y ra, th√¥ng b√°o ng∆∞·ªùi d√πng li√™n h·ªá ƒë·ªÉ b√°o l·ªói
            await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi k√Ω t·ªáp. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
            return
        
        # G·ª≠i th√¥ng b√°o k√Ω th√†nh c√¥ng
        await m.edit("T·ªáp c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng. ƒêang t·∫£i l√™n m√°y ch·ªß l∆∞u tr·ªØ, xin ch·ªù...")
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng FormData ƒë·ªÉ g·ª≠i file ƒë√£ k√Ω
        async with aiohttp.ClientSession() as session:
            with open(output_file_path, 'rb') as f:
                form = aiohttp.FormData()
                form.add_field('reqtype', 'fileupload')
                form.add_field('time', UPLOAD_TIME)
                form.add_field('fileToUpload', f, filename=os.path.basename(output_file_path))

                async with session.post(API_URL, data=form) as response:
                    # L·∫•y ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng vƒÉn b·∫£n
                    response_text = await response.text()
                    
                    # Ki·ªÉm tra v√† tr√≠ch xu·∫•t URL t·ª´ ph·∫£n h·ªìi
                    if response_text.startswith("http"):
                        file_url = response_text.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng kh√¥ng c·∫ßn thi·∫øt
                        troll_url = f"apple-magnifier://install?url={file_url}"
                        install_url = f"https://dl.thuthuatjb.com/ipa/install.html?url={file_url}"
                        
                        # T√≠nh th·ªùi gian h·∫øt h·∫°n v·ªõi m√∫i gi·ªù Asia/Ho_Chi_Minh (UTC+7)
                        tz = pytz.timezone('Asia/Ho_Chi_Minh')
                        expiration_time = datetime.now(tz) + timedelta(hours=1)
                        expiration_str = expiration_time.strftime("%H:%M:%S %d/%m/%Y")
                        
                        output = (
                            f'<b>ƒê√£ k√Ω t·ªáp v√† t·∫°o li√™n k·∫øt th√†nh c√¥ng. T√™n t·ªáp ƒë∆∞·ª£c k√Ω: {original_file_name}</b>\n\nL∆∞u √Ω ipa ƒë∆∞·ª£c k√Ω th√¥ng qua ch·ª©ng ch·ªâ mi·ªÖn ph√≠, s·∫Ω kh√¥ng c√†i ƒë·∫∑t th√†nh c√¥ng n·∫øu ch·ª©ng ch·ªâ h·∫øt h·∫°n ho·∫∑c thi·∫øt b·ªã c·ªßa b·∫°n b·ªã blacklist v·ªõi ch·ª©ng ch·ªâ.\n\nB·∫°n ph·∫£i b·∫≠t URL Scheme Enabled trong tab Settings c·ªßa Trollstore ƒë·ªÉ c√†i ƒë∆∞·ª£c qua Trollstore.\n\n<b>Li√™n k·∫øt c√≥ hi·ªáu l·ª±c trong 1 ti·∫øng v√† s·∫Ω h·∫øt h·∫°n v√†o l√∫c {expiration_str}</b>.'
                        )
                        btn = InlineKeyboardMarkup(
                            [
                                [
                                    InlineKeyboardButton("üì• qua Trollstore", url=f"https://api.dabeecao.org/data/urlscheme/index.php?url={troll_url}"),
                                    InlineKeyboardButton("üì• qua OTA", url=install_url),
                                ],
                                [
                                    InlineKeyboardButton("·ª¶ng h·ªô Ti·∫øn Sƒ© T√®o", url="https://dabeecao.org#donate")
                                ]
                            ]
                        )
                        await m.edit(output, reply_markup=btn)
                        
                        # X√≥a c√°c file t·∫°m ngay sau khi ho√†n t·∫•t
                        if os.path.exists(original_file_path):
                            os.remove(original_file_path)
                        if os.path.exists(output_file_path):
                            os.remove(output_file_path)
                        
                        # X√≥a tin nh·∫Øn sau 60 ph√∫t
                        await auto_delete_message(m, TIMEOUT_MINUTES * 60)  # 60 ph√∫t
                    else:
                        await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n file. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c b√°o l·ªói cho @dabeecao")
    except subprocess.CalledProcessError:
        # X·ª≠ l√Ω l·ªói khi ch·∫°y l·ªánh zsign
        await m.edit("ƒê√£ x·∫£y ra l·ªói khi k√Ω t·ªáp. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
    except Exception as e:
        await bot.send_message(message.chat.id, text="ƒê√£ x·∫£y ra l·ªói! Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
    finally:
        # X√≥a c√°c file t·∫°m trong tr∆∞·ªùng h·ª£p c√≥ l·ªói x·∫£y ra
        if os.path.exists(original_file_path):
            os.remove(original_file_path)
        if os.path.exists(output_file_path):
            os.remove(output_file_path)
            
@app.on_message(filters.command(["cloneapp"], COMMAND_HANDLER))
async def upload(bot, message):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† trong nh√≥m
    if message.chat.type != enums.ChatType.GROUP and message.chat.type != enums.ChatType.SUPERGROUP:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")
    
    if not message.reply_to_message:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin .ipa ho·∫∑c .tipa b·∫±ng l·ªánh.")
    
    media = message.reply_to_message.document
    if not media or not media.file_name.endswith(('.ipa', '.tipa')):
        return await message.reply("Ch·ªâ h·ªó tr·ª£ t·ªáp .ipa ho·∫∑c .tipa.")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc t·∫≠p tin
    file_size_mb = media.file_size / (1024 * 1024)  # K√≠ch th∆∞·ªõc t·∫≠p tin t√≠nh b·∫±ng MB
    if file_size_mb > MAX_FILE_SIZE_MB:
        return await message.reply("T·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªâ t·∫£i l√™n c√°c t·∫≠p tin d∆∞·ªõi 1GB.")
    
    m = await message.reply("ƒêang t·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß x·ª≠ l√Ω...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    original_file_path = await message.reply_to_message.download(
        file_name=os.path.join(ASSETS_DIR, generate_random_filename()),
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )

    original_file_name = media.file_name  # L∆∞u l·∫°i t√™n t·ªáp g·ªëc

    # ƒê·ªïi t√™n file th√†nh t√™n ng·∫´u nhi√™n v·ªõi ƒëu√¥i .ipa n·∫øu c·∫ßn
    if original_file_path.endswith('.tipa'):
        new_file_path = original_file_path.replace('.tipa', '.ipa')
        os.rename(original_file_path, new_file_path)
        original_file_path = new_file_path

    # T·∫°o t√™n t·ªáp ƒë·∫ßu ra v·ªõi t√™n ng·∫´u nhi√™n c√≥ h·∫≠u t·ªë "_output.ipa"
    output_file_path = original_file_path.replace(".ipa", "_output.ipa")

    # L·∫•y t√™n ng·∫´u nhi√™n t·ª´ t·ªáp t·∫£i xu·ªëng kh√¥ng c√≥ ƒëu√¥i .ipa
    random_name = os.path.basename(original_file_path).replace('.ipa', '')

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c t·ªáp v√† ƒë∆∞·ªùng d·∫´n
    if not os.path.exists(original_file_path):
        await m.edit(f"T·ªáp IPA kh√¥ng t·ªìn t·∫°i: {original_file_path}")
        return

    try:
        # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu k√Ω
        await m.edit("ƒêang ti·∫øn h√†nh nh√¢n b·∫£n t·ªáp c·ªßa b·∫°n, xin ch·ªù...")

        # K√Ω file b·∫±ng v√† thay ƒë·ªïi bundle id
        command = f"/root/.local/bin/cyan -o {output_file_path} -i {original_file_path} -b com.thuthuatjb.{random_name}"
        
        # Ch·∫°y l·ªánh zsign b·∫±ng subprocess v√† ghi c·∫£ stdout v√† stderr
        result = subprocess.run(
            ['sh', '-c', command], 
            cwd=GETINSTALL_DIR,  # Ch·∫°y l·ªánh trong th∆∞ m·ª•c getinstall
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            env=os.environ.copy()
        )

        # Ki·ªÉm tra xem c√≥ l·ªói kh√¥ng
        if result.returncode != 0:
            # C√≥ l·ªói x·∫£y ra, th√¥ng b√°o ng∆∞·ªùi d√πng li√™n h·ªá ƒë·ªÉ b√°o l·ªói
            await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi nh√¢n b·∫£n. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
            return
        
        # G·ª≠i th√¥ng b√°o k√Ω th√†nh c√¥ng
        await m.edit("T·ªáp c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c nh√¢n b·∫£n th√†nh c√¥ng. ƒêang g·ª≠i l·∫°i t·ªáp, xin ch·ªù...")

        # G·ª≠i t·ªáp ƒë√£ k√Ω l√™n Telegram
        signed_file_name = f"{original_file_name.replace('.ipa', '')}_clone_TTJB.ipa"
        await message.reply_document(
            document=output_file_path,
            file_name=signed_file_name,
            caption=f"ƒê√£ nh√¢n b·∫£n th√†nh c√¥ng {original_file_name} th√†nh {signed_file_name}\n\nM·ªói l·∫ßn d√πng l·ªánh nh√¢n b·∫£n s·∫Ω lu√¥n t·∫°o ra ·ª©ng d·ª•ng kh√¥ng bao gi·ªù tr√πng l·∫∑p. Nh·∫•n /donate cho ti·∫øn sƒ© n·∫øu b·∫°n th·∫•y h·ªØu √≠ch nh√©."
        )

        # Xo√° tin nh·∫Øn th√¥ng b√°o
        await m.delete()

    except subprocess.CalledProcessError:
        # X·ª≠ l√Ω l·ªói khi ch·∫°y l·ªánh zsign
        await m.edit("ƒê√£ x·∫£y ra l·ªói khi nh√¢n b·∫£n. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
    except Exception as e:
        await bot.send_message(message.chat.id, text="ƒê√£ x·∫£y ra l·ªói! Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
    finally:
        # X√≥a c√°c file t·∫°m trong tr∆∞·ªùng h·ª£p c√≥ l·ªói x·∫£y ra
        if os.path.exists(original_file_path):
            os.remove(original_file_path)
        if os.path.exists(output_file_path):
            os.remove(output_file_path)
            
@app.on_message(filters.command(["inject_iap"], COMMAND_HANDLER))
async def upload(bot, message):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† trong nh√≥m
    if message.chat.type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng tr·∫£ l·ªùi tin nh·∫Øn c√≥ file ƒë√≠nh k√®m
    if not message.reply_to_message or not message.reply_to_message.document:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin .ipa ho·∫∑c .tipa b·∫±ng l·ªánh.")

    media = message.reply_to_message.document
    if not media.file_name.endswith(('.ipa', '.tipa')):
        return await message.reply("Ch·ªâ h·ªó tr·ª£ t·ªáp .ipa ho·∫∑c .tipa.")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc t·∫≠p tin
    file_size_mb = media.file_size / (1024 * 1024)  # K√≠ch th∆∞·ªõc t·∫≠p tin t√≠nh b·∫±ng MB
    if file_size_mb > MAX_FILE_SIZE_MB:
        return await message.reply("T·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªâ t·∫£i l√™n c√°c t·∫≠p tin d∆∞·ªõi 1GB.")

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c t·ªáp v√† ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt
    required_files = {
        "ADBLOCK": ADBLOCK_PATH,
        "SATELLA": SATELLA_PATH,
    }
    for name, path in required_files.items():
        if not os.path.exists(path):
            return await message.reply(f"T·ªáp {name} kh√¥ng t·ªìn t·∫°i: {path}")

    # T·∫£i file xu·ªëng
    m = await message.reply("ƒêang t·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß x·ª≠ l√Ω...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    original_file_path = await message.reply_to_message.download(
        file_name=os.path.join(ASSETS_DIR, generate_random_filename()),
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )

    original_file_name = media.file_name  # L∆∞u l·∫°i t√™n t·ªáp g·ªëc
    
    # ƒê·ªïi t√™n file th√†nh .ipa n·∫øu c·∫ßn
    if original_file_path.endswith('.tipa'):
        new_file_path = original_file_path.replace('.tipa', '.ipa')
        os.rename(original_file_path, new_file_path)
        original_file_path = new_file_path

    output_file_path = original_file_path.replace(".ipa", "_output.ipa")
    signed_file_name = f"{os.path.basename(original_file_name).replace('.ipa', '')}_iap_noads_TTJB.ipa"
    temp_files = []  # Danh s√°ch ƒë·ªÉ l∆∞u c√°c t·ªáp t·∫°m

    try:
        # Ti√™m t·ª´ng dylib v√†o file IPA
        await m.edit("ƒêang ti·∫øn h√†nh ti√™m t·ªáp c·ªßa b·∫°n, xin ch·ªù...")
        intermediate_file_path = original_file_path  # B·∫Øt ƒë·∫ßu v·ªõi file g·ªëc

        for iap_path in [ADBLOCK_PATH, SATELLA_PATH]:
            temp_output_path = intermediate_file_path.replace(".ipa", f"_temp_{os.path.basename(iap_path)}.ipa")
            temp_files.append(temp_output_path)  # L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n t·ªáp t·∫°m

            command = f'/root/.local/bin/cyan -o {temp_output_path} -uwsgf {iap_path} -i {intermediate_file_path}'
            result = subprocess.run(
                ['sh', '-c', command],
                cwd=GETINSTALL_DIR,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=os.environ.copy()
            )

            if result.returncode != 0:
                await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m {iap_path}. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
                return

            intermediate_file_path = temp_output_path  # C·∫≠p nh·∫≠t file IPA t·∫°m th·ªùi m·ªõi cho l·∫ßn ti·∫øp theo

        # ƒê·ªïi t√™n file cu·ªëi c√πng
        os.rename(intermediate_file_path, output_file_path)
        await m.edit("T·ªáp c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti√™m th√†nh c√¥ng. ƒêang g·ª≠i l·∫°i t·ªáp, xin ch·ªù...")

        # G·ª≠i t·ªáp ƒë√£ k√Ω l√™n Telegram
        await message.reply_document(
            document=output_file_path,
            file_name=signed_file_name,
            caption=f"ƒê√£ ti√™m th√†nh c√¥ng {media.file_name} th√†nh {signed_file_name}\n\nNh·∫•n /donate cho ti·∫øn sƒ© n·∫øu b·∫°n th·∫•y h·ªØu √≠ch nh√©."
        )

        # Xo√° tin nh·∫Øn th√¥ng b√°o
        await m.delete()

    except Exception as e:
        await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.\nChi ti·∫øt l·ªói: {str(e)}")
    finally:
        # X√≥a c√°c file t·∫°m trong tr∆∞·ªùng h·ª£p c√≥ l·ªói x·∫£y ra
        for path in [original_file_path, output_file_path] + temp_files:
            if os.path.exists(path):
                os.remove(path)
        
@app.on_message(filters.command(["inject_fix"], COMMAND_HANDLER))
async def upload(bot, message):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† trong nh√≥m
    if message.chat.type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng tr·∫£ l·ªùi tin nh·∫Øn c√≥ file ƒë√≠nh k√®m
    if not message.reply_to_message or not message.reply_to_message.document:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin .ipa ho·∫∑c .tipa b·∫±ng l·ªánh.")

    media = message.reply_to_message.document
    if not media.file_name.endswith(('.ipa', '.tipa')):
        return await message.reply("Ch·ªâ h·ªó tr·ª£ t·ªáp .ipa ho·∫∑c .tipa.")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc t·∫≠p tin
    file_size_mb = media.file_size / (1024 * 1024)  # K√≠ch th∆∞·ªõc t·∫≠p tin t√≠nh b·∫±ng MB
    if file_size_mb > MAX_FILE_SIZE_MB:
        return await message.reply("T·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªâ t·∫£i l√™n c√°c t·∫≠p tin d∆∞·ªõi 1GB.")

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c t·ªáp v√† ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt
    required_files = {
        "FIX": FIX_PATH,
        "FIX1": FIX1_PATH,
        "FIX2": FIX2_PATH,
    }
    for name, path in required_files.items():
        if not os.path.exists(path):
            return await message.reply(f"T·ªáp {name} kh√¥ng t·ªìn t·∫°i: {path}")

    # T·∫£i file xu·ªëng
    m = await message.reply("ƒêang t·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß x·ª≠ l√Ω...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    original_file_path = await message.reply_to_message.download(
        file_name=os.path.join(ASSETS_DIR, generate_random_filename()),
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )

    original_file_name = media.file_name  # L∆∞u l·∫°i t√™n t·ªáp g·ªëc
    
    # ƒê·ªïi t√™n file th√†nh .ipa n·∫øu c·∫ßn
    if original_file_path.endswith('.tipa'):
        new_file_path = original_file_path.replace('.tipa', '.ipa')
        os.rename(original_file_path, new_file_path)
        original_file_path = new_file_path

    output_file_path = original_file_path.replace(".ipa", "_output.ipa")
    signed_file_name = f"{os.path.basename(original_file_name).replace('.ipa', '')}_fixsideload_TTJB.ipa"
    temp_files = []  # Danh s√°ch ƒë·ªÉ l∆∞u c√°c t·ªáp t·∫°m

    try:
        # Ti√™m t·ª´ng dylib v√†o file IPA
        await m.edit("ƒêang ti·∫øn h√†nh ti√™m t·ªáp c·ªßa b·∫°n, xin ch·ªù...")
        intermediate_file_path = original_file_path  # B·∫Øt ƒë·∫ßu v·ªõi file g·ªëc

        for fix_path in [FIX_PATH, FIX1_PATH, FIX2_PATH]:
            temp_output_path = intermediate_file_path.replace(".ipa", f"_temp_{os.path.basename(fix_path)}.ipa")
            temp_files.append(temp_output_path)  # L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n t·ªáp t·∫°m

            command = f'/root/.local/bin/cyan -o {temp_output_path} -uwsgf {fix_path} -i {intermediate_file_path}'
            result = subprocess.run(
                ['sh', '-c', command],
                cwd=GETINSTALL_DIR,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=os.environ.copy()
            )

            if result.returncode != 0:
                await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m {fix_path}. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.")
                return

            intermediate_file_path = temp_output_path  # C·∫≠p nh·∫≠t file IPA t·∫°m th·ªùi m·ªõi cho l·∫ßn ti·∫øp theo

        # ƒê·ªïi t√™n file cu·ªëi c√πng
        os.rename(intermediate_file_path, output_file_path)
        await m.edit("T·ªáp c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti√™m th√†nh c√¥ng. ƒêang g·ª≠i l·∫°i t·ªáp, xin ch·ªù...")

        # G·ª≠i t·ªáp ƒë√£ k√Ω l√™n Telegram
        await message.reply_document(
            document=output_file_path,
            file_name=signed_file_name,
            caption=f"ƒê√£ ti√™m th√†nh c√¥ng {media.file_name} th√†nh {signed_file_name}\n\nNh·∫•n /donate cho ti·∫øn sƒ© n·∫øu b·∫°n th·∫•y h·ªØu √≠ch nh√©."
        )

        # Xo√° tin nh·∫Øn th√¥ng b√°o
        await m.delete()

    except Exception as e:
        await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.\nChi ti·∫øt l·ªói: {str(e)}")
    finally:
        # X√≥a c√°c file t·∫°m trong tr∆∞·ªùng h·ª£p c√≥ l·ªói x·∫£y ra
        for path in [original_file_path, output_file_path] + temp_files:
            if os.path.exists(path):
                os.remove(path)
                

@app.on_message(filters.command(["inject_ext"], COMMAND_HANDLER))
async def upload(bot, message):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l√† trong nh√≥m
    if message.chat.type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply("L·ªánh n√†y ch·ªâ h·ªó tr·ª£ trong nh√≥m. H√£y tham gia nh√≥m @thuthuatjb_sp ƒë·ªÉ s·ª≠ d·ª•ng.")

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng tr·∫£ l·ªùi tin nh·∫Øn c√≥ file ƒë√≠nh k√®m
    if not message.reply_to_message or not message.reply_to_message.document:
        return await message.reply("Vui l√≤ng tr·∫£ l·ªùi t·∫≠p tin .ipa ho·∫∑c .tipa b·∫±ng l·ªánh.")

    media = message.reply_to_message.document
    if not media.file_name.endswith(('.ipa', '.tipa')):
        return await message.reply("Ch·ªâ h·ªó tr·ª£ t·ªáp .ipa ho·∫∑c .tipa.")

    # Ki·ªÉm tra k√≠ch th∆∞·ªõc t·∫≠p tin
    file_size_mb = media.file_size / (1024 * 1024)  # K√≠ch th∆∞·ªõc t·∫≠p tin t√≠nh b·∫±ng MB
    if file_size_mb > MAX_FILE_SIZE_MB:
        return await message.reply("T·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªâ t·∫£i l√™n c√°c t·∫≠p tin d∆∞·ªõi 1GB.")

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa dylib
    if not os.path.exists(EXTENSIONFIX_PATH):
        return await message.reply(f"T·ªáp EXTENSIONFIX kh√¥ng t·ªìn t·∫°i: {EXTENSIONFIX_PATH}")

    # T·∫£i file xu·ªëng
    m = await message.reply("ƒêang t·∫£i t·∫≠p tin c·ªßa b·∫°n xu·ªëng m√°y ch·ªß x·ª≠ l√Ω...")
    now = time.time()
    dc_id = FileId.decode(media.file_id).dc_id
    original_file_path = await message.reply_to_message.download(
        file_name=os.path.join(ASSETS_DIR, generate_random_filename()),
        progress=progress_for_pyrogram,
        progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", m, now, dc_id),
    )

    original_file_name = media.file_name  # L∆∞u l·∫°i t√™n t·ªáp g·ªëc

    # ƒê·ªïi t√™n file th√†nh .ipa n·∫øu c·∫ßn
    if original_file_path.endswith('.tipa'):
        new_file_path = original_file_path.replace('.tipa', '.ipa')
        os.rename(original_file_path, new_file_path)
        original_file_path = new_file_path

    signed_file_name = f"{os.path.basename(original_file_name).replace('.ipa', '')}_fixEXT_TTJB.ipa"
    output_file_path = os.path.join(ASSETS_DIR, signed_file_name)

    try:
        # Ch·∫°y l·ªánh ipapatch
        await m.edit("ƒêang ti√™m ExtensionFix v√†o IPA...")
        command = [
            'ipapatch',
            '--input', original_file_path,
            '--output', output_file_path,
            '--dylib', EXTENSIONFIX_PATH,
            '--noconfirm'
        ]

        result = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if result.returncode != 0:
            error_msg = result.stderr.strip() or "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c l·ªói."
            return await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m IPA.\nChi ti·∫øt l·ªói: {error_msg}")

        await m.edit("T·ªáp c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti√™m th√†nh c√¥ng. ƒêang g·ª≠i l·∫°i t·ªáp, xin ch·ªù...")

        # G·ª≠i t·ªáp ƒë√£ k√Ω l√™n Telegram
        await message.reply_document(
            document=output_file_path,
            file_name=signed_file_name,
            caption=f"ƒê√£ ti√™m th√†nh c√¥ng {media.file_name} th√†nh {signed_file_name}\n\nNh·∫•n /donate cho ti·∫øn sƒ© n·∫øu b·∫°n th·∫•y h·ªØu √≠ch nh√©."
        )

        # Xo√° tin nh·∫Øn th√¥ng b√°o
        await m.delete()

    except Exception as e:
        await m.edit(f"ƒê√£ x·∫£y ra l·ªói khi ti√™m. Vui l√≤ng li√™n h·ªá @dabeecao ƒë·ªÉ b√°o l·ªói.\nChi ti·∫øt l·ªói: {str(e)}")
    finally:
        # X√≥a c√°c file t·∫°m
        for path in [original_file_path, output_file_path]:
            if os.path.exists(path):
                os.remove(path)
        
@app.on_message(filters.command(["getfile"], COMMAND_HANDLER) & filters.user(SUDO))
@capture_err
@new_task
async def download(client, message):
    pesan = await message.reply_text("ƒêang x·ª≠ l√Ω...", quote=True)
    if message.reply_to_message is not None:
        # Tr∆∞·ªùng h·ª£p tr·∫£ l·ªùi v√†o m·ªôt t·ªáp
        start_t = datetime.now()
        c_time = time.time()
        vid = [
            message.reply_to_message.video,
            message.reply_to_message.document,
            message.reply_to_message.audio,
            message.reply_to_message.photo,
        ]
        media = next((v for v in vid if v is not None), None)
        if not media:
            return await pesan.edit("Lo·∫°i ph∆∞∆°ng ti·ªán kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
        dc_id = FileId.decode(media.file_id).dc_id

        # T·∫°o chu·ªói ng·∫´u nhi√™n ƒë·ªÉ th√™m v√†o t√™n t·ªáp
        random_suffix = ''.join(random.choices(string.ascii_letters + string.digits, k=6))

        # ƒê·∫∑t ƒë∆∞·ªùng d·∫´n l∆∞u file v·ªõi t√™n t·ªáp ng·∫´u nhi√™n
        download_path = '/opt/storage/Private/Downloads/' + os.path.splitext(media.file_name)[0] + "_" + random_suffix + os.path.splitext(media.file_name)[1]

        the_real_download_location = await client.download_media(
            message=message.reply_to_message,
            file_name=download_path,
            progress=progress_for_pyrogram,
            progress_args=("ƒêang c·ªë t·∫£i v·ªÅ, xin ch·ªù..", pesan, c_time, dc_id),
        )
        end_t = datetime.now()
        ms = (end_t - start_t).seconds

        # L·∫•y k√≠ch th∆∞·ªõc t·ªáp t√≠nh b·∫±ng bytes
        file_size = os.path.getsize(the_real_download_location)

        await pesan.edit(
            f"ƒê√£ t·∫£i t·ªáp tin ƒë·∫øn m√°y ch·ªß l∆∞u tr·ªØ.\nT√™n t·ªáp tin: <code>{media.file_name}</code>\nK√≠ch th∆∞·ªõc <code>{file_size}</code> bytes\nƒê√£ t·∫£i trong <u>{ms}</u> gi√¢y."
        )
    elif len(message.command) > 1:
        # Tr∆∞·ªùng h·ª£p t·∫£i file t·ª´ URL
        start_t = datetime.now()
        the_url_parts = " ".join(message.command[1:])
        url = the_url_parts.strip()
        custom_file_name = os.path.basename(url)
        if "|" in the_url_parts:
            url, custom_file_name = the_url_parts.split("|")
            url = url.strip()
            custom_file_name = custom_file_name.strip()

        # T·∫°o chu·ªói ng·∫´u nhi√™n ƒë·ªÉ th√™m v√†o t√™n t·ªáp t·∫£i v·ªÅ t·ª´ URL
        random_suffix = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
        download_file_path = os.path.join("downloads/", os.path.splitext(custom_file_name)[0] + "_" + random_suffix + os.path.splitext(custom_file_name)[1])

        # B·∫Øt ƒë·∫ßu t·∫£i v·ªÅ
        downloader = SmartDL(url, download_file_path, progress_bar=False, timeout=10)
        try:
            downloader.start(blocking=False)
        except Exception as err:
            return await pesan.edit(str(err))

        # Hi·ªÉn th·ªã ti·∫øn tr√¨nh t·∫£i v·ªÅ
        c_time = time.time()
        display_message = ""
        while not downloader.isFinished():
            total_length = downloader.filesize or None
            downloaded = downloader.get_dl_size(human=True)
            now = time.time()
            diff = now - c_time
            percentage = downloader.get_progress() * 100
            speed = downloader.get_speed(human=True)
            progress_str = "[{0}{1}]\nTi·∫øn tr√¨nh: {2}%".format(
                "".join(["‚óè" for _ in range(math.floor(percentage / 5))]),
                "".join(["‚óã" for _ in range(20 - math.floor(percentage / 5))]),
                round(percentage, 2),
            )

            estimated_total_time = downloader.get_eta(human=True)
            try:
                current_message = (
                    f"ƒêang c·ªë t·∫£i v·ªÅ...\nURL: <code>{url}</code>\n"
                    f"T√™n t·ªáp tin: <code>{unquote(custom_file_name)}</code>\n"
                    f"T·ªëc ƒë·ªô: {speed}\n{progress_str}\n"
                    f"{downloaded} of {humanbytes(total_length)}\n"
                    f"Ho√†n th√†nh sau: {estimated_total_time}"
                )
                if round(diff % 10.00) == 0 and current_message != display_message:
                    await pesan.edit(
                        disable_web_page_preview=True, text=current_message
                    )
                    display_message = current_message
                    await asyncio.sleep(10)
            except Exception as e:
                LOGGER.info(str(e))
        
        # T·∫£i l√™n Telegram v√† xo√° file
        if os.path.exists(download_file_path):
            await client.send_document(
                message.chat.id, download_file_path
            )
            
            # L·∫•y k√≠ch th∆∞·ªõc t·ªáp t√≠nh b·∫±ng bytes
            file_size = os.path.getsize(download_file_path)
            
            os.remove(download_file_path)  # X√≥a file sau khi t·∫£i l√™n

            end_t = datetime.now()
            ms = (end_t - start_t).seconds

            await pesan.edit(
                f"ƒê√£ t·∫£i xu·ªëng v√† t·∫£i l√™n Telegram <code>{download_file_path}</code> c√≥ k√≠ch th∆∞·ªõc {file_size} bytes trong {ms} gi√¢y"
            )
    else:
        await pesan.edit(
            "Tr·∫£ l·ªùi Telegram Media ƒë·ªÉ t·∫£i n√≥ xu·ªëng m√°y ch·ªß c·ª•c b·ªô c·ªßa t√¥i."
        )


@app.on_message(filters.command(["getinstall"], COMMAND_HANDLER))
@capture_err
@new_task
async def getinstall(_, message):
    await message.reply(
        f"Ch·ª©ng ch·ªâ thu h·ªìi r·ªìi, ch·ªù ch·ª©ng ch·ªâ m·ªõi ƒëi ƒë·ªìng ch√≠.üëå"
    )